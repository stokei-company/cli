import { EventPublisher } from '@nestjs/cqrs';
import { Test } from '@nestjs/testing';
import { Create<%= props.pascalCaseSingularName %>CommandHandler } from '.';

describe('Create<%= props.pascalCaseSingularName %>CommandHandler', () => {
  let create<%= props.pascalCaseSingularName %>CommandHandler: Create<%= props.pascalCaseSingularName %>CommandHandler;

  beforeEach(async () => {
    const moduleRef = await Test.createTestingModule({
      controllers: [],
      providers: [
        Create<%= props.pascalCaseSingularName %>CommandHandler,
        {
          provide: EventPublisher,
          useFactory: () => ({
            mergeObjectContext: jest.fn().mockImplementation(() => ({
              changedPassword: jest.fn(),
              commit: jest.fn()
            }))
          })
        }
      ]
    }).compile();

    create<%= props.pascalCaseSingularName %>CommandHandler = moduleRef.get(Create<%= props.pascalCaseSingularName %>CommandHandler);
  });
  afterEach(() => {
    jest.clearAllMocks();
  });

  it('should be defined', () => {
    expect(create<%= props.pascalCaseSingularName %>CommandHandler).toBeDefined();
  });
});
