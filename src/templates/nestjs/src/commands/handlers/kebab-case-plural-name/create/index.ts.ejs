import { CommandHandler, EventPublisher, ICommandHandler } from '@nestjs/cqrs';
import { Create<%= props.table.pascalCaseSingularName %>Command } from '@/commands/implements/<%= props.table.kebabCasePluralName %>/create-<%= props.table.kebabCaseSingularName %>.command';
import {
  <%= props.table.pascalCaseSingularName %>NotFoundException,
  DataNotFoundException,
  ParamNotFoundException
} from '@/errors';
import { Create<%= props.table.pascalCaseSingularName %>Repository } from '@/repositories/<%= props.table.kebabCasePluralName %>/create-<%= props.table.kebabCaseSingularName %>';
import { cleanObject, cleanValue } from '@stokei/nestjs';

type Create<%= props.table.pascalCaseSingularName %>CommandKeys = keyof Create<%= props.table.pascalCaseSingularName %>Command;

@CommandHandler(Create<%= props.table.pascalCaseSingularName %>Command)
export class Create<%= props.table.pascalCaseSingularName %>CommandHandler
  implements ICommandHandler<Create<%= props.table.pascalCaseSingularName %>Command>
{
  constructor(
    private readonly create<%= props.table.pascalCaseSingularName %>Repository: Create<%= props.table.pascalCaseSingularName %>Repository,
    private readonly publisher: EventPublisher
  ) {}

  async execute(command: Create<%= props.table.pascalCaseSingularName %>Command) {
    const data = this.clearData(command);
    if (!data) {
      throw new DataNotFoundException();
    }
    if (!data?.parent) {
      throw new ParamNotFoundException<Create<%= props.table.pascalCaseSingularName %>CommandKeys>('parent');
    }

    const <%= props.table.camelCaseSingularName %>Created = await this.create<%= props.table.pascalCaseSingularName %>Repository.execute(data);
    if (!<%= props.table.camelCaseSingularName %>Created) {
      throw new <%= props.table.pascalCaseSingularName %>NotFoundException();
    }
    const <%= props.table.camelCaseSingularName %>Model = this.publisher.mergeObjectContext(<%= props.table.camelCaseSingularName %>Created);
    <%= props.table.camelCaseSingularName %>Model.created<%= props.table.pascalCaseSingularName %>();
    <%= props.table.camelCaseSingularName %>Model.commit();

    return <%= props.table.camelCaseSingularName %>Created;
  }

  private clearData(command: Create<%= props.table.pascalCaseSingularName %>Command): Create<%= props.table.pascalCaseSingularName %>Command {
    return cleanObject({
      name: cleanValue(command?.name),
      parent: cleanValue(command?.parent)
    });
  }
}
