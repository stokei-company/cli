import { Injectable, Scope } from '@nestjs/common';
import { FindAll<%= props.table.pascalCasePluralName %>Service } from '@/services/<%= props.table.kebabCasePluralName %>/find-all-<%= props.table.kebabCasePluralName %>';
import DataLoader from 'dataloader';

@Injectable({ scope: Scope.REQUEST })
export class <%= props.table.pascalCasePluralName %>Loader {
  constructor(private readonly <%= props.table.camelCasePluralName %>Service: FindAll<%= props.table.pascalCasePluralName %>Service) {}

  readonly findByIds = new DataLoader(async (<%= props.table.camelCaseSingularName %>Ids: string[]) => {
    const <%= props.table.camelCasePluralName %> = await this.<%= props.table.camelCasePluralName %>Service.execute({
      where:{
        AND: {
          ids: <%= props.table.camelCaseSingularName %>Ids,
        }
      }
    });
    const <%= props.table.camelCasePluralName %>Map = new Map(
      <%= props.table.camelCasePluralName %>?.items?.map((<%= props.table.camelCaseSingularName %>) => [<%= props.table.camelCaseSingularName %>.id, <%= props.table.camelCaseSingularName %>])
    );
    return <%= props.table.camelCaseSingularName %>Ids.map((<%= props.table.camelCaseSingularName %>Id) => <%= props.table.camelCasePluralName %>Map.get(<%= props.table.camelCaseSingularName %>Id));
  });
}
