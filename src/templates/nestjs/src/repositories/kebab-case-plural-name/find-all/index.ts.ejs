import { Injectable } from '@nestjs/common';
import {
  IBaseRepository,
  IOperator,
  PrismaMapper,
  cleanObject
} from '@stokei/nestjs';
import { PrismaClient } from '@/database/prisma/client';
import {
  FindAll<%= props.table.pascalCasePluralName %>DTO,
  IKeysWhereDataFindAll<%= props.table.pascalCasePluralName %>DTO
} from '@/dtos/<%= props.table.kebabCasePluralName %>/find-all-<%= props.table.kebabCasePluralName %>.dto';
import { <%= props.table.pascalCaseSingularName %>Mapper } from '@/mappers/<%= props.table.kebabCasePluralName %>';
import { <%= props.table.pascalCaseSingularName %>Model } from '@/models/<%= props.table.kebabCaseSingularName %>.model';

@Injectable()
export class FindAll<%= props.table.pascalCasePluralName %>Repository
  implements IBaseRepository<FindAll<%= props.table.pascalCasePluralName %>DTO, Promise<<%= props.table.pascalCaseSingularName %>Model[]>>
{
  constructor(private readonly model: PrismaClient) {}

  async execute(data: FindAll<%= props.table.pascalCasePluralName %>DTO): Promise<<%= props.table.pascalCaseSingularName %>Model[]> {
    const prismaMapper = new PrismaMapper();
    const orderBy = prismaMapper.toOrderBy(cleanObject(data?.orderBy));
    const mapDTODataToPrisma = (operator: IOperator) => {
      const operatorData = data?.where?.[operator];
      if (!operatorData) {
        return null;
      }
      return {
        [operator]: {
          ...(operatorData.ids &&
            prismaMapper.toWhereIds<IKeysWhereDataFindAll<%= props.table.pascalCasePluralName %>DTO>(
              'ids',
              operatorData.ids
            )),
          ...(operatorData.name &&
            prismaMapper.toWhereDataSearch<IKeysWhereDataFindAll<%= props.table.pascalCasePluralName %>DTO>(
              'name',
              operatorData.name
            )),
          ...(operatorData.parent &&
            prismaMapper.toWhereData<IKeysWhereDataFindAll<%= props.table.pascalCasePluralName %>DTO>(
              'parent',
              operatorData.parent
            )),
        }
      };
    };
    return new <%= props.table.pascalCaseSingularName %>Mapper().toModels(
      await this.model.<%= props.table.camelCaseSingularName %>.findMany({
        where: {
          ...cleanObject(mapDTODataToPrisma('AND')),
          ...cleanObject(mapDTODataToPrisma('OR')),
          ...cleanObject(mapDTODataToPrisma('NOT'), true)
        },
        orderBy,
        ...prismaMapper.toPagination({ page: data?.page })
      })
    );
  }
}
