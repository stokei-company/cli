import { Injectable } from '@nestjs/common';
import {
  IBaseRepository,
  IOperator,
  PrismaMapper,
  cleanObject,
} from '@stokei/nestjs';
import { PrismaClient } from '@/database/prisma/client';
import {
  FindAll<%= props.table.pascalCasePluralName %>DTO
} from '@/dtos/<%= props.table.kebabCasePluralName %>/find-all-<%= props.table.kebabCasePluralName %>.dto';
import { <%= props.table.pascalCaseSingularName %>Mapper } from '@/mappers/<%= props.table.kebabCasePluralName %>';
import { <%= props.table.pascalCaseSingularName %>Model } from '@/models/<%= props.table.kebabCaseSingularName %>.model';

@Injectable()
export class FindAll<%= props.table.pascalCasePluralName %>Repository
  implements IBaseRepository<FindAll<%= props.table.pascalCasePluralName %>DTO, Promise<<%= props.table.pascalCaseSingularName %>Model[]>>
{
  constructor(private readonly model: PrismaClient) {}

  async execute(data: FindAll<%= props.table.pascalCasePluralName %>DTO): Promise<<%= props.table.pascalCaseSingularName %>Model[]> {
    const prismaMapper = new PrismaMapper();
    const orderBy = prismaMapper.toOrderBy(cleanObject(data?.orderBy));
    const mapFromDTOOperatorDataToPrismaOperatorData = (operator: IOperator) => {
      const operatorData = data?.where?.[operator];
      if (!operatorData) {
        return null;
      }
      return {
        id: prismaMapper.toWhereIds(operatorData.ids),
        name: prismaMapper.toWhereDataSearch(operatorData.name),
        parent: prismaMapper.toWhereData(operatorData.parent)
      };
    };
    return new <%= props.table.pascalCaseSingularName %>Mapper().toModels(
      await this.model.<%= props.table.camelCaseSingularName %>.findMany({
        where: prismaMapper.toWhere({
          AND: mapFromDTOOperatorDataToPrismaOperatorData('AND'),
          OR: mapFromDTOOperatorDataToPrismaOperatorData('OR'),
          NOT: mapFromDTOOperatorDataToPrismaOperatorData('NOT')
        }),
        orderBy,
        ...prismaMapper.toPagination({ page: data?.page })
      })
    );
  }
}
